import os
import streamlit as st
import google.generativeai as genai
import PyPDF2
import pikepdf
import tempfile

genai.configure(api_key="GOOGLE_API_KEY")

class PDFChatApp:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        st.set_page_config(page_title="PDF –ß–∞—Ç —Å AI", page_icon="üìÑ")
        st.title("ü§ñ PDF Chat —Å  AI")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if 'uploaded_files' not in st.session_state:
            st.session_state.uploaded_files = []
        if 'chat_history' not in st.session_state:
            st.session_state.chat_history = []

    def extract_text_from_pdf(self, pdf_path):
        try:
            with open(pdf_path, 'rb') as pdf_file:
                pdf_reader = PyPDF2.PdfReader(pdf_file)
                extracted_text = ""
                for page in pdf_reader.pages:
                    try:
                        text = page.extract_text()
                        if text:
                            extracted_text += text + "\n\n" # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    except Exception as page_error:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_error}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if not extracted_text.strip():
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞—â–∏—â–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                    return None

                return extracted_text
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
            return None

    def extract_text_with_pikepdf(self, pdf_path):
        try:
            pdf = pikepdf.Pdf.open(pdf_path)
            extracted_text = ""
            for page in pdf.pages:
                try:
                    text_extraction = page.extract_text()
                    if text_extraction:
                        extracted_text += text_extraction + "\n\n"
                except Exception as page_error:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_error}")

            if not extracted_text.strip():
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é pikepdf")
                return None

            return extracted_text
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF —Å –ø–æ–º–æ—â—å—é pikepdf: {e}")
            return None

    def upload_file_to_gemini(self, file_path):
        try:
            uploaded_file = genai.upload_file(file_path)
            return uploaded_file
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return None

    def process_documents(self):
        st.sidebar.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        uploaded_files = st.sidebar.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ PDF-—Ñ–∞–π–ª—ã",
            type=['pdf'],
            accept_multiple_files=True
        )

        if uploaded_files:
            for uploaded_file in uploaded_files:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
                    temp_file.write(uploaded_file.getvalue())
                    temp_file_path = temp_file.name

                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
                extracted_text = self.extract_text_from_pdf(temp_file_path)

                if not extracted_text:
                    extracted_text = self.extract_text_with_pikepdf(temp_file_path)

                if extracted_text:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Gemini
                    try:
                        gemini_file = self.upload_file_to_gemini(temp_file_path)

                        if gemini_file:
                            st.sidebar.success(f"‚úÖ –§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                            st.session_state.uploaded_files.append({
                                'name': uploaded_file.name,
                                'path': temp_file_path,
                                'gemini_file': gemini_file,
                                'text': extracted_text # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                            })
                    except Exception as upload_error:
                        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {upload_error}")
                else:
                    st.sidebar.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {uploaded_file.name}")

                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.unlink(temp_file_path)

    def chat_interface(self):
        st.header("üí¨ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not st.session_state.uploaded_files:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª—ã –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é")
            return

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_choice = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Gemini",
            ["gemini-1.5-flash"]
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
        st.session_state['selected_model'] = model_choice

        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        user_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")

        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
            if not user_query:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
                return

            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                selected_gemini_files = [
                    file['gemini_file'] for file in st.session_state.uploaded_files
                ]

                if not selected_gemini_files:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                    return

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
                model = genai.GenerativeModel(model_choice)

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                query_content = [user_query] + selected_gemini_files

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                response = model.generate_content(query_content)

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                st.success("ü§ñ –û—Ç–≤–µ—Ç :")
                st.write(response.text)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                st.session_state.chat_history.append({
                    'query': user_query,
                    'response': response.text
                })

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
        if st.session_state.chat_history:
            with st.expander("üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞"):
                for chat in st.session_state.chat_history:
                    st.markdown(f"**–ó–∞–ø—Ä–æ—Å:** {chat['query']}")
                    st.markdown(f"**–û—Ç–≤–µ—Ç:** {chat['response']}")
                    st.divider()

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.process_documents()
        self.chat_interface()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = PDFChatApp()
    app.run()
